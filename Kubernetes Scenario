1. Scenario: You have a Kubernetes cluster with multiple worker nodes. One of the nodes becomes unresponsive and needs to be replaced. Explain the steps you would take to replace the node without affecting the availability of applications running on the cluster.
Answer: To replace the unresponsive node without affecting application availability, I would follow these steps:

Drain the unresponsive node: Use the kubectl drain command to gracefully evict all the pods running on the unresponsive node. This ensures that the pods are rescheduled on other healthy nodes.

Cordon the unresponsive node: Use the kubectl cordon command to mark the node as unschedulable. This prevents new pods from being scheduled on the node while it's being replaced.

Remove the unresponsive node: Once all the pods are safely rescheduled, you can remove the unresponsive node from the cluster, either by repairing it or provisioning a new node.

Uncordon the node: Once the new node is ready, use the kubectl uncordon command to mark it as schedulable again. This allows new pods to be scheduled on the replacement node.

################################################################################################################################################################################

2. Scenario: You have a stateful application running on Kubernetes that requires persistent storage. How would you ensure that the data is retained when the pods are rescheduled or updated?
Answer: To ensure data retention for a stateful application, I would use the following Kubernetes features:

Persistent Volumes (PVs) and Persistent Volume Claims (PVCs): I would create a Persistent Volume that represents the storage resource (e.g., a network-attached disk) and then create a Persistent Volume Claim that binds to the PV. This ensures that the same volume is attached to the pod when it's rescheduled or updated.

StatefulSets: I would use StatefulSets to manage the stateful application. StatefulSets ensure that each pod has a unique identity and stable network identity, allowing the pod to retain its storage even during rescheduling or updates. StatefulSets can use PVCs to attach the appropriate Persistent Volumes to each pod.

Storage Classes: I would define Storage Classes to dynamically provision Persistent Volumes based on predefined storage requirements. This allows for automated volume provisioning when new PVCs are created. By leveraging these features, the stateful application can maintain its data even when pods are rescheduled, updated, or scaled up/down.

###########################################################################################################################################################################

3. Scenario: A Kubernetes pod is stuck in a "Pending" state. What could be the possible reasons, and how would you troubleshoot it?
Possible reasons for a pod being stuck in the "Pending" state could include:

- Insufficient resources: Check if the cluster has enough resources (CPU, memory, storage) to accommodate the pod. You can use the kubectl describe pod <pod-name> command to view detailed information about the pod, including any resource-related issues.

- Unschedulable nodes: Check if all the nodes in the cluster are in the "Ready" state and can schedule the pod. You can use the kubectl get nodes command to see the node status.

- Pod scheduling constraints: Verify if the pod has any scheduling constraints or affinity/anti-affinity rules that are preventing it from being scheduled. Check the pod's YAML or manifest file for any such specifications.

- Persistent Volume (PV) availability: If the pod requires a Persistent Volume, ensure that the required storage is available and accessible.

- Network-related issues: Check if there are any network restrictions or misconfigurations preventing the pod from being scheduled or communicating with other resources.

#########################################################################################################################################################################

4. Scenario: You have a Kubernetes Deployment with multiple replicas, and some pods are failing health checks. How would you identify the root cause and fix it?
To identify the root cause and fix failing health checks for pods in a Kubernetes Deployment:

- Check the pod's logs: Use the kubectl logs <pod-name> command to retrieve the logs of the failing pod. Inspect the logs for any error messages or exceptions that could indicate the cause of the failure.

- Verify health check configurations: Examine the readiness and liveness probe configurations in the Deployment's YAML or manifest file. Ensure that the endpoints being probed are correct, the expected response is received, and the success criteria are appropriately defined.

- Debug container startup: If the pods are failing to start, check the container's startup commands, entrypoints, or initialization processes. Use the kubectl describe pod <pod-name> command to get detailed information about the pod, including any container-related errors.

- Resource constraints: Inspect the resource requests and limits for the pods. It's possible that the pods are exceeding the allocated resources, causing failures. Adjust the resource specifications as necessary.

- Image issues: Verify that the Docker image being used is correct and accessible. Ensure that the image's version, registry, and repository details are accurate.

- Rollout issues: If the pods were recently deployed or updated, ensure that the rollout process completed successfully. Check the deployment's status using kubectl rollout status <deployment-name> and examine any rollout history with kubectl rollout history <deployment-name>.

####################################################################################################################################################################

5. Scenario: You need to scale a Kubernetes Deployment manually. How would you accomplish this?
To manually scale a Kubernetes Deployment:

- Use the kubectl scale command: Run kubectl scale deployment/<deployment-name> --replicas=<number-of-replicas> to scale the deployment. Replace <deployment-name> with the name of your deployment, and <number-of-replicas> with the desired number of replicas.

- Alternatively, update the Deployment YAML: Modify the replicas field in the Deployment's YAML or manifest file to the desired number of replicas. Then, apply the changes using kubectl apply -f <path-to-deployment-yaml>.

##############################################################################################################################################################################

6. Scenario: You have a Kubernetes cluster with multiple worker nodes, and some pods are experiencing high CPU usage. How would you investigate and mitigate this issue?
To investigate and mitigate high CPU usage in Kubernetes pods:

- Identify the affected pods: Use kubectl top pods to view CPU and memory usage across the cluster and identify the pods with high CPU usage.

- Check pod resource limits: Verify if the affected pods have appropriate resource limits defined. If the limits are too low, the pods may struggle to handle the workload, resulting in high CPU usage. Adjust the resource limits accordingly.

- Analyze application code: Review the application code running inside the pods to identify any inefficiencies or resource-intensive operations that could be causing the high CPU usage. Optimize the code where possible.

- Scale horizontally: If the high CPU usage is due to increased traffic or workload, consider scaling the affected deployment horizontally by increasing the number of replicas. This distributes the load across multiple pods and can help alleviate CPU pressure.

- Implement resource quotas: Define resource quotas at the namespace level to limit the amount of CPU resources each pod can consume. This prevents individual pods from monopolizing the CPU and affecting other workloads.

###########################################################################################################################################################################

7. Scenario: You have a Kubernetes cluster hosting multiple microservices, and you need to enforce communication restrictions between them. How would you achieve this?
To enforce communication restrictions between microservices in a Kubernetes cluster:

- Use network policies: Network policies are Kubernetes objects that control the traffic flow between pods based on defined rules. Create network policies to specify which pods can communicate with each other based on labels, namespaces, or IP ranges. Configure the policies to allow or deny traffic as per your desired communication restrictions.

- Deny all traffic by default: Set up a default-deny rule in the network policies to block all inter-pod communication by default. Then, explicitly define policies to allow specific communication paths between authorized microservices.

- Label pods and apply policies selectively: Label the microservice pods based on their roles or functions. Then, define network policies that target specific labels, enabling you to enforce communication restr- Use network policies: Network policies are Kubernetes objects that control the traffic flow between pods based on defined rules. Create network policies to specify which pods can communicate with each other based on labels, namespaces, or IP ranges. Configure the policies to allow or deny traffic as per your desired communication restrictions.

- Deny all traffic by default: Set up a default-deny rule in the network policies to block all inter-pod communication by default. Then, explicitly define policies to allow specific communication paths between authorized microservices.

- Label pods and apply policies selectively: Label the microservice pods based on their roles or functions. Then, define network policies that target specific labels, enabling you to enforce communication restrictions at a granular level.

- Validate and test policies: Regularly validate and test the network policies to ensure they are functioning as intended. Deploy test pods with different labels and verify if the communication restrictions are being correctly enforced.

###########################################################################################################################################################################

8. Scenario: You have a Kubernetes cluster, and you want to schedule certain pods on specific nodes based on node availability and custom requirements. How would you achieve this?
To schedule pods on specific nodes based on availability and custom requirements in Kubernetes:

- Use node affinity: Node affinity allows you to define rules for pod scheduling based on node labels. Assign specific labels to nodes that meet the desired requirements. Then, specify the corresponding node affinity rules in the pod's YAML or manifest file, ensuring that the pod gets scheduled on the desired nodes.

- Combine node affinity with node taints: Node taints can be used to mark specific nodes to be tolerated or avoided by pods. Taint the nodes that need to be scheduled for specific pods. Then, define corresponding tolerations in the pod's YAML or manifest file to ensure that the pod can be scheduled on those nodes.

- Leverage node selectors: Node selectors are a simple way to schedule pods on specific nodes. Assign labels to the nodes and define the matching node selector in the pod's YAML or manifest file to direct the scheduler to schedule the pod on the desired nodes.

- Utilize node-specific resources: If certain nodes have specialized hardware or unique capabilities required by specific pods, label those nodes accordingly. Then, use node affinity rules to schedule pods that require those resources on the corresponding nodesictions at a granular level.

- Validate and test policies: Regularly validate and test the network policies to ensure they are functioning as intended. Deploy test pods with different labels and verify if the communication restrictions are being correctly enforced.

#######################################################################################################################################################################################

8. Scenario: You have a Kubernetes cluster, and you want to schedule certain pods on specific nodes based on node availability and custom requirements. How would you achieve this?
To schedule pods on specific nodes based on availability and custom requirements in Kubernetes:

- Use node affinity: Node affinity allows you to define rules for pod scheduling based on node labels. Assign specific labels to nodes that meet the desired requirements. Then, specify the corresponding node affinity rules in the pod's YAML or manifest file, ensuring that the pod gets scheduled on the desired nodes.

- Combine node affinity with node taints: Node taints can be used to mark specific nodes to be tolerated or avoided by pods. Taint the nodes that need to be scheduled for specific pods. Then, define corresponding tolerations in the pod's YAML or manifest file to ensure that the pod can be scheduled on those nodes.

- Leverage node selectors: Node selectors are a simple way to schedule pods on specific nodes. Assign labels to the nodes and define the matching node selector in the pod's YAML or manifest file to direct the scheduler to schedule the pod on the desired nodes.

- Utilize node-specific resources: If certain nodes have specialized hardware or unique capabilities required by specific pods, label those nodes accordingly. Then, use node affinity rules to schedule pods that require those resources on the corresponding nodes

https://www.linkedin.com/pulse/kubernetes-interview-question-answers-scenario-based-preethi-dovala-8nnkc/
